#! /bin/bash

_VERSION_=1.0.0

BOLD="\e[1m"
BLINK="\e[5m"
RESET="\e[0m"

FGRED="\e[31m"
FGGREEN="\e[32m"

splash () {
  echo -e "  ____  ___                        "
  echo -e " / ___|/ _ \ _ __ __ _  ___  _ __  "
  echo -e "| |  _| | | | '__/ _\` |/ _ \| '_ \ "
  echo -e "| |_| | |_| | | | (_| | (_) | | | |"
  echo -e " \____|\___/|_|  \__, |\___/|_| |_|"
  echo -e "                 |___/             "
}

log () {
  case "$1" in
    ok)
      echo -en " $BOLD[$RESET${FGGREEN}${BOLD}OK${RESET}$BOLD]$RESET   "  
    ;;
    err)
      echo -en " $BOLD[$RESET${FGRED}${BOLD}ERR${RESET}$BOLD]$RESET  "
    ;;
    info)
      echo -en " $BOLD[$RESET${FGGREEN}${BOLD}INFO${RESET}$BOLD]$RESET "
    ;;
    done)
      echo -en " $BOLD[$RESET${BLINK}${FGGREEN}${BOLD}DONE${RESET}$BOLD]$RESET "  
    ;;
  esac
  echo -e "$2"
}

check () {
  result="$(command -v $1)"
}

get_go_latest_version () {
  echo $(wget -qO- "https://golang.org/dl/" \
    | grep -v -E "go[0-9\.]+(beta|rc)" \
    | grep -E -o "go[0-9\.]+" \
    | grep -E -o "[0-9]\.[0-9]+(\.[0-9]+)?" \
    | uniq \
    | sort -V \
    | tail -1)
}

get_operating_system_name () {
  echo $(uname -s | tr "[:upper:]" "[:lower:]")
}

get_operating_system_arch () {
  _arch="$(uname -m)"
  case "$_arch" in
    i*)
      arch="386"
    ;;
    x*)
      arch="amd64"
    ;;
    *)
      arch="armv6l"
    ;;
  esac
  echo $arch
}

extract_downloaded_file() {
  if [ -d go ]; then
    log "info" "go/ directory exists !"
    log "info" "Replacing existing go/ directory"
    rm -rf go
  fi

  tar -zxf $filename
  rm -rf $filename
}

move_go_directory () {
  if [ -d /usr/local/go ]; then
    log "info" "/usr/local/go/ directory exists !"
    log "info" "Replacing existing /usr/local/go/ directory"
    sudo rm -rf /usr/local/go/
  fi

  sudo mv -f go/ /usr/local
}

add_go_env () {
  if [ -f /etc/profile.d/go-env.sh ]; then
    log "info" "/etc/profile.d/go-env.sh directory exists !"
    log "info" "Replacing existing /etc/profile.d/go-env.sh directory"
    sudo rm -rf /etc/profile.d/go-env.sh
  fi

  cat > "/tmp/go-env.sh" << EOF
# DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING
export GOPATH=\$HOME/Documents/go
export GOBIN=\$GOPATH/bin

export PATH=\$PATH:/usr/local/go/bin
EOF

  sudo cp -f /tmp/go-env.sh /etc/profile.d/go-env.sh
  rm -rf /tmp/go-env.sh

  source /etc/profile.d/go-env.sh
}

make_go_env () {
  mkdir -p $HOME/Documents/go/{src,pkg,bin}
}

main () {
  log "info" "Starting Go Installer"

  log "info" "Checking Go latest version"
  version="$(get_go_latest_version)"
  log "ok" "Go latest version: $version"

  log "info" "Checking operating system name"
  os="$(get_operating_system_name)"
  log "ok" "Operating system name: $os"

  log "info" "Checking operating system architecture"
  arch="$(get_operating_system_arch)"
  log "ok" "Operating system architecture: $arch"

  filename="go$version.$os-$arch.tar.gz"

  log "info" "Downloading Go"
  $downloader "https://dl.google.com/go/$filename" --show-progress -qO $filename
  log "ok" "Go downloaded"

  log "info" "Extracting downloaded file"
  extract_downloaded_file
  log "ok" "File extracted"

  log "info" "Moving go directory to /usr/local"
  move_go_directory
  log "ok" "Directory Moved"

  log "info" "Adding Go environment variables at /etc/profile.d/go-env.sh"
  add_go_env
  log "ok" "Go environment variables added"

  log "info" "Making Go environment at $HOME/documents/go"
  make_go_env
  log "ok" "Go environment made"

  log "done" "Go installed successfully"

  echo " The \"go\" command can't be used until the next user login"
  echo " You can execute \"source /etc/profile.d/go-env.sh\" to activate the go command"
}

splash

if check "wget"; then
  downloader="$result -qO-"
elif check "curl"; then
  downloader="$result --silent"
else
  log "err" "Go Installer requires either wget or curl, please resolve and try again."
  exit
fi

[ "$(whoami)" != "root" ] && main && exit
log "err" "Don't run Go Installer as superuser, please resolve and try again."